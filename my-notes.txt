git:what is git?	"git is a ""source code management tool"":"
git:how does git work?	tell it you want to change these files: known as a commit
git:what is a commit?	a change to one or more files: files are associated with commits
git:what gets saved in a commit?	what was changed: this lets you get back to a specific commit
git:what happens if you're working on stuff other people are working on?	branches: everyone gets a branch and can commit freely
git:what is a pull request?	looks at each function and discovers conflicts: determine which one is better
git:what is a branch?	a new thing is made that is a copy:
git:what is cloning?	gets a local copy of whatever repo: use git clone [repo-url]
git:how do I switch branches?	use git checkout [branch-name]:
git:how do I make a new branch?	use git checkout -b [branch name]: gets a new branch and moves to it
git:how do I sync my code to a branch?	use git add [file] to stage a file:
git:what does it mean to stage a file?	specify which files you want to commit: use git add -a
git:what does it mean to commit?	": use git commit|| git commit -m ""[message]"""
git:when adding files how do you see what files you've added?	use git status: lets you see the stage of the repo
git:what does it mean to push?	put the commits from local to cloud: use git push
git:how do I handle merge conflicts?	use git pull: synchronize frequently
git:how do I make sure people can see my changes?	you have to push:
git:how often should I push and pull?	whenever you make a specific change:
git:what are features?	branches that only handle changes relevant to specific things:
git:how often should I pull?	check git status as often as possible: pull whenever features are completed
git:what should I do if I can't fix conflicts?	create a new branch:
JavaScript:why should I use JavaScript?	it can be used to make dynamic web pages:
JavaScript:what do you need to know for web development?	Javascript HTML and CSS:
JavaScript:how do users access data on the web?	users send requests to servers to access data stored on databases:
JavaScript:what is used to connect the server to the database?	Java Python and JavaScript can all be used:
JavaScript:what does NodeJS let you do?	make servers:
JavaScript:when is JS better?	ask Netflix idk:
JavaScript:what is JS most popular for?	UI:
JavaScript:what are some characteristics of JS?	Asynchronous Object-oriented Functional-aspects Weakly-typed Interpreted High-level Automatically-managed-memory Line-by-line ECMA script:
JavaScript:how do we declare variables?	use `let` `var` or `const`:
JavaScript:what is node built off of?	chrome v8 engine:
JavaScript:how do default values work?	use = to assign default value in a function's parameters:
JavaScript:how do you declare a global variable?	declare it outside of all functions and blocks:
JavaScript:which variable declaration keywords are block scoped?	`let` and `const`:
JavaScript:what is hoisting?	a declaration is put at the top of its scope:
JavaScript:what happens when a variable is used outside of its scope?	a reference error:
JavaScript:what characters can be used to delimit strings?	"' or "" or `:"
"JavaScript:what is the advantage of using ' over ""?"	"the "" are more common in HTML so we can avoid escaping them:"
JavaScript:what is `` used for?	template literals:
JavaScript:what is a template literal?	allows for multiline comments and expression dereferencing: similar to command substitution in bash
JavaScript:what is the template literal expression string interpolation syntax?	${}:
JavaScript:how do we get output to the console?	use console.log():
JavaScript:what is the operator for boolean and?	&amp;&amp;:
JavaScript:what is the operator for boolean not?	!:
JavaScript:what is a block?	code in curly braces:
JavaScript:how do we use while loops?	while(expr){}:
JavaScript:how do we use do-while loops?	do{}while(expr):
JavaScript:how do we use ternary?	expr? &lt;option 1&gt;:&lt;option 2&gt;:
JavaScript:how do we declare functions?	function name(param*){}:
JavaScript:how does typing work in JS?	it's weakly typed:
JavaScript:what does it mean to be loosely typed?	a variable can contain any type: don't declare type when you declare variable
JavaScript:is it still typical to use single quotes when using HTML and JS?	yes it is:
JavaScript:what did ES6 introduce?	template literals - default parameters - let and const - arrow notation:
JavaScript:what is arrow notation?	let variable() =&gt; {}:
JavaScript:how many parameters can you have in a function?	any number:
JavaScript:what are rest params?	takes all parameters and throws them in an array:
JavaScript:how do we use enhanced for loop?	:
JavaScript:when do we use a while versus a for?	when you know how many use a for:
JavaScript:what is the difference between while and do-while?	do-while is guarenteed to run at least once:
JavaScript:what is node?	node is a runtime environment and interpreter: it allows us to create a server
JavaScript:how object-oriented is JavaScript?	yeah
JavaScript:what is object-oriented?	inheritance abstraction polymorphism encapsulation (I Ape)
JavaScript:how do we declare an object in JavaScript?	let &lt;object-name&gt; = { &lt;key1&gt;:&lt;val1&gt;: *}
JavaScript:how do we access fields in an object?	use dot notation or bracket notation:
JavaScript:can we add fields to an object after its creation?	yes but you should not:
JavaScript:how do object prototypes work?	allow you to change the object the variable belongs to:
JavaScript:how do we create constructors?	can include a function that the object:
JavaScript:what is the relationship between function passing and callback function?	they are required for callback functions:
JavaScript:what is prototypal inheritance?	there is some object at the base of everything and any object can inherit any prototype:my parent may be a sheep, but now he's a wolf
JavaScript:what is the root level of objects?	Object:
JavaScript:how do we determine which field is used when we attempt to access a field associated with an object?	checks the object referenced then its __proto__s recursively:
JavaScript:what is the difference between inheritance and prototypal inheritance?	the thing the object stems from can be changed:
JavaScript:can you use extends?	yeah:
JavaScript:how do you use the 'new' keyword?	creates an object and assigns the proto: you can use it with a class or constructor function
JavaScript:how do you create objects?	you can use new or create object literals:
JavaScript:what is an object?	just a set of key-value pairs: essentially just a map
JavaScript:what values are equivalent to true?	all values that are not false: these are called truthy
JavaScript:what values are equivalent to false?	empty string - 0 - null - undefined - false -NaN: these are called falsey values
JavaScript:is there a way to overwrite turthy/falsy value of given object?	aparently not
JavaScript:how do I make sure an object gets gc'd?	redirect all global references and stop using it or exit scope:
JavaScript:how do we check if a thing is defined in some?	use &amp;&amp; operator:
"JavaScript:what is !!""""?"	false:
JavaScript:what is abstraction?	how something is done is removed from you: a word that should be used more often
JavaScript:what is an example of abstraction?	calling a method or creating a class under prototyping automatically:
JavaScript:what do interfaces allow us to do?	interact consistently with something that has been abstracted:
JavaScript:how do sequential elements in an array correspond to memory?	:
JavaScript:what is the time complexity of element access in an array?	O(1):
JavaScript:how do linked lists work?	each node points to another node: takes O(n) access time
JavaScript:what are the main collection(s)?	arrays:
JavaScript:how can we add elements to an array?	push:
JavaScript:how does push work?	adds the element to the end of the array:
JavaScript:how can we remove elements from an array?	we can either remove just the element or adjust the other indexes:
JavaScript:will QC ask about big O notation?	probably not:
JavaScript:how does an array work?	they're pretty dynamic you can add elements to and remove from: not finite sized
JavaScript:is there a pop method?	idk doesn't matter:
JavaScript:how do we add to the beginning of an array?	use unshift:
JavaScript:how do we remove and squeeze elements?	use splice:
JavaScript:how do we access elements in an array?	use &lt;array&gt;[index]:
JavaScript:how do we add to the end of an array?	use push:
JavaScript:what type of objects can be in an array?	any type including mixed types:
JavaScript:how do we use an enhanced for loop?	for (&lt;element&gt; of &lt;array&gt;) {}:
JavaScript:what can you do with arrays?	sore things in 'em and iterate through 'em:
JavaScript:what are callback functions?	:
JavaScript:what is the difference between == and ===?	== performs type coercion but === does not: === checks both type and value
JavaScript:are callbacks like events?	callback functions are often used in events where callback functions are registered:
JavaScript:what does it mean to register a callback function?	:
JavaScript:how does forEach(fun) work?	evokes a callback function for each element of an array:
JavaScript:what are the application of callback functions in arrays?	filtering by element:
JavaScript:how can you do this stuff on strings?	convert to array via string then use join to put it back:
JavaScript:how often are callback functions used?	quite in libraries:
JavaScript:what is destructuring?	let {&lt;field1&gt;, &lt;field2&gt;} = obj: a convenience for extracting fields from object
JavaScript:what is the spread operator?	... &lt;object name&gt; copies k-v pairs into new object literal: introuduced in ES6
JavaScript:what is the guard operator?	a &amp;&amp; b: returns b if !!a
JavaScript:can functions exist outside of objects?	yeah:
JavaScript:what are some functional programming characteristics?	functions can exist and data is immutable:
JavaScript:what opperator supports immutable data?	the spread operator:
JavaScript:how does the spread operator work in arrays?	... &lt;array name&gt; copies array elements at location:
JavaScript:does spread put a copy or a reference to the object given?	for fields of type object a copy is passed which points to the same memory: otherwise value is passed
JavaScript:what is variable shadowing?	a variable can be accessed according to different scopes at the same time:
JavaScript:are things passed by value or by reference?	value:
JavaScript:how is memory managed?	stack and heap: heap stores objects and stack stores variables and location
JavaScript:suppose two variables reference the same object. What happens when one variable's assignment changed?	the two variables now point to different objects:
JavaScript:what is a closure?	a variable declared outside a function is used in a function. Even after the variable outside of the variable is no longer alive because it has left its scope, the reference to the variable within the function keeps it alive and allows the function to manipulate it
JavaScript:suppose two variables reference the same object. What happens when one variable manipulates the object?	the variables point to the same manipulated object:
JavaScript:when should you use the guard operator?	when you want to check for null undefined etc:
JavaScript:what is the default operator?	return b unless !!a: a||b
JavaScript:are the variables assigned from destructuring passed by reference or by value?	they are passed by value:
JavaScript:what does the splice thing mean in question 11?	remove that element:
TypeScript:what is TypeScript?	it's a superset of JS:
TypeScript:why don't we use TypeScript for everything?	browsers don't understnad JS:
TypeScript:what is transpiling?	when you convert code written in a language to code written in a similar level language:
TypeScript:what is compiling?	when you convert code written in a language to code written in a lower level language:
TypeScript:will browsers eventually understand native TypeScript?	who knows: people are compiling TO javaScript so it's unlikely
TypeScript:what does TypeScript add to JavaScript?	types interfaces generics and access modifiers:
TypeScript:how is the type of a variable determined?	it can be either inferred or stated: let a:number = 5 or let a = 5
TypeScript:how do you declare function parameter types?	use p:&lt;type&gt; in place of the parameter p: if no type is given then p is p:any
TypeScript:how many types can variables have?	the bar operator allows multiple types to be specified: a:number|string
TypeScript:what do types allow you to do?	catch type errors at compiletime:
TypeScript:what are access modifiers?	public private (default) protected:
TypeScript:what is the difference between an interface and an abstract class?	:
TypeScript:what is npm?	can be used to download libraries and versions of node:
TypeScript:how do we use comments?	use // or /* */: same as in JS
TypeScript:is it possible to overload functions?	not really but you can declare optional params:
TypeScript:what is the difference between interface and abstract class?	can extend multiple IF but only one abstract class: IF cannot have concrete methods
TypeScript:what is abstraction?	where an interface is provided in place of the implementation:
TypeScript:what is an interface?	just defines abstract methods and possibly fields: also known as a contract
TypeScript:what is an abstract method?	just a signature with no implementation:
TypeScript:where is an interface useful?	defining how something works without having to define the implementation details: allows code to work regardless of changes to the rest of the code
TypeScript:what is an abstract class?	can have concrete or abstract methods: can only extend one abstract class
TypeScript:what do interfaces and abstract classes have in common?	cannot be instantiated directly, both support abstract methods:
TypeScript:when should I use abstract class?	some functionality is defined but some relies on user specific functionality:
TypeScript:what is importing in ES6?	allows you to grab code segments and objects from other files and use them:
TypeScript:?	:
Web development: what does a full stack web app look like?	needs the followig layer: user-facing server and persistence
Web development: what is the persistence layer?	databases and static models:
Web development: what is the user facing layer?	the browser that lets the user request and send information: constant info exchange with server layer
Web development: what is the server layer?	acts as a middle ground between the user and the database layer: constant info exchange with both layers
Web development: what languages can be used for servers?	c# Java Javascript Python etc:
Web development: what languages can be used for user facing?	html css and JS:
Web development: what languages can be used for databases?	MySQL MongoDB Oracle PostgreSQL:
Web development: how many jobs are there in web development?	a ton:
Web development: what certs will get reimbursed?	OCA possibly AWS: devops or cloud
JavaScript:what is the template literal string interpretation syntax?	${}:
JavaScript:how do function passing differ from callback function?	they are required for callback functions:
JavaScript:how do we determine field to use?	checks the object referenced then its __proto__s recursively:
ES6 modules: what is an es6 module?	lets you export whatever you want:
ES6 modules: how does importing work?	import {&lt;name1&gt; &lt;name2&gt; ...} 'path-to-file': import * as personFile from 'path-to-file'
ES6 modules: how well is import and export supported?	several browsers don't support it but ts-node does:
ES6 modules: how are modules similar to namespaces?	allows you to call the &lt;named import&gt;.&lt;symbol&gt;:
ES6 modules: how does default work?	import whatever from 'path-to-file': export default let &lt;object declaration&gt;
ES6 modules: if you do like just import * from 'path-to-file' do you need an alias?	yes:
what is a web api	the thing you have exposed for access
how do we create an entry point file for a server with express	&lt;edit this code with the source code&gt;
express:what is express?	a thing that lets us handle http requests:it's a framework for creating middleware
express:how do we handle http requests?	"via express.&lt;REQUEST&gt;(""path"": &lt;callback function&gt;)"
express:how do we handle arbitrary http requests?	app.use():
express:what is middleware?	request handling entry point that may pass to another piece of middleware:
express:what are some examples of middleware?	logger security body-parser request-handler:
express:what is a body parser?	parses a JSON body and creates a javascript object based on it:
express:how do we allow middleware to intervene regardless of the url of the request?	don't provide the url to the middleware function:
express:how do we pass through a piece of middlware?	use next() instead of send():
TypeScript:what is soa?	service oriented architecture: based on black boxes
TypeScript:what is a black box?	allows sending requests and getting responses in given formats: internals are abstracted
TypeScript:what is an example of soa?	web services or server-server communication:
TypeScript:what are some advantages of soa?	there is no need to know what is going on on the other end:
TypeScript:what is SOAP?	service oriented architecture protocol:
TypeScript:what is REST?	uses either http or https: stateless
TypeScript:how does REST rely on http/https?	uses status codes in headers for exception handling:
TypeScript:what language does REST use for data?	technically any but most commonly JSON:
TypeScript:what is a resource in REST?	can be an object or file:
TypeScript:how do we access resources in REST?	via URLs:
TypeScript:how do we get all user resources in REST?	GET /users would get all users:
TypeScript:how do we access users by id?	GET /users/:id:
TypeScript:how do we get all users with a given value parameter for a particular key?	GET /users/[key]/[value]:
TypeScript:how do we create a user resource?	use POST /[symbol]: should pass object
TypeScript:how do we replace or create a resource?	use PATCH /[symbol]: should pass object
TypeScript:what do REST conventions help us do?	identify where things should be when things go wrong:
TypeScript:how do urls correspond to routers?	one url for each /[symbol] is usually good:
stack: why don't things always stop when you hit the end of the file?	there are other loops and queues that need to be resolved:
stack: how many threads do I have control over?	1:
stack: what is the event loop?	waits for requests to be passed in:
stack: what is the callback queue?	where requests go to be served after the stack is empty:
stack: what is an event listener?	we can have things waiting for events:
stack: what do we do with event listeners?	register them to callback functions:
stack: what happens if multiple events come in?	they get put on a queue until the stack is empty:
stack: what do specific threads do?	one handles execution and 3 or more handle the event loop:
stack: what makes JS good for web development?	becasue requests are very small it is very fast to get through the callback queue:
stack: when is JS bad?	when a lot of longrunning processes are triggered:
stack: what is the chrome V8 engine?	it's a heap and then it's a call back:
stack: what is a call stack?	holds calls to be executed:
stack: what is blocking?	code that is slow:
stack: where do calls go if not onto the stack?	they are pushed onto APIs:
stack: what happens to a call when it is done blocking in an API?	the event loop pushes it unto the stack:
stack: what is it the event loop?	pushes callbacks from the callback queue unto the stack:
stack: what is a shim?	wrapping code around other code:
http: what does the GET keyword do?	retrieve resources:
http: what does the POST keyword do?	create resources:
http: what does the PUT keyword do?	create or update resources:
http: what does the DELETE keyword do?	delete resources:
http: what does the PATCH keyword do?	partial update of resources:
http: how are credentials sent?	:
http: what is a status code in HTTP?	used to help identify what happend within the server:
http: what is the 100 series of status code?	info:
http: what is the 200 series of status code?	success:
http: what is the 300 series of status code?	redirect:
http: what is the 400 series of status code?	error occurred due to client:
http: what is the 500 series of status code?	error occurred due to server:
http: what is the 600 series of status code?	error occurred due to server:
http: how do we handle errors?	using status code:
http: where does http run on?	tcp:
http: where does tcp run on?	ip:
http: what is the default port of http?	80:
http: what is a network?	just a bunch of wires that lets computers communicate:
